{
   "globals":[

   ],
   "triggers":[
      {
         "type":"endpoint",
         "meta":{
            "category":"trigger",
            "name":"endpoint",
            "label":"POST /reset-password",
            "x":440,
            "y":320,
            "uiId":"rJeDT73u0b",
            "description":"When a user submits the reset password form ..."
         },
         "config":{

         },
         "key":"",
         "outputIds":[
            [
               "SJclKiu0-"
            ]
         ]
      },
      {
         "type":"endpoint",
         "meta":{
            "category":"trigger",
            "name":"endpoint",
            "label":"GET /reset-password",
            "x":640,
            "y":320,
            "uiId":"BkbD6Q3d0W",
            "description":"When a user visits the reset password page ..."
         },
         "config":{

         },
         "key":"",
         "outputIds":[
            [
               "SJclKiu0-"
            ]
         ]
      }
   ],
   "nodes":[
      {
         "type":"JWTVerifyNode",
         "meta":{
            "category":"logic",
            "name":"jwt-verify",
            "label":"Token valid?",
            "x":540,
            "y":420,
            "description":"Do we have a token, and is it valid? (e.g. Has it expired?)"
         },
         "config":{
            "tokenTemplate":"{{data.query.token}}",
            "secretTemplate":"{{globals.jwtSecret}}",
            "issuerTemplate":"{{applicationId}}",
            "errorPath":"decodeTokenError"
         },
         "id":"SJclKiu0-",
         "outputIds":[
            [
               "rkFJB2O0Z"
            ],
            [
               "ryQrtoOR-"
            ]
         ]
      },
      {
         "type":"JWTDecodeNode",
         "meta":{
            "category":"logic",
            "name":"jwt-decode",
            "label":"JWT: Decode",
            "x":620,
            "y":520,
            "description":"Decode the token and store the result on the payload."
         },
         "config":{
            "tokenTemplate":"{{data.query.token}}",
            "destinationPath":"decodedToken"
         },
         "id":"ryQrtoOR-",
         "outputIds":[
            [
               "S1S2GpuCW"
            ]
         ]
      },
      {
         "type":"EndpointReplyNode",
         "meta":{
            "category":"output",
            "name":"endpoint-reply",
            "label":"Token error redirect",
            "x":340,
            "y":1520,
            "description":"The original request will never succeed. Redirect to /forgot-password so the user can start over."
         },
         "config":{
            "headerInfo":[

            ],
            "cookieInfo":[

            ],
            "replyType":"redirect",
            "replyIdPath":"",
            "responseCodeTemplate":"302",
            "bodyTemplate":"/forgot-password?resetError=true",
            "bodyTemplateType":"string"
         },
         "id":"rkFJB2O0Z",
         "outputIds":[
            [
               "rkSK-TdRZ"
            ]
         ]
      },
      {
         "type":"EndpointReplyNode",
         "meta":{
            "category":"output",
            "name":"endpoint-reply",
            "label":"Reset Failure",
            "x":740,
            "y":1520,
            "description":"An error occurred. Render the reset password page with an error."
         },
         "config":{
            "headerInfo":[

            ],
            "cookieInfo":[

            ],
            "replyType":"page",
            "replyIdPath":"",
            "responseCodeTemplate":"401",
            "bodyTemplate":"{\n  \"resetPasswordFailure\": {{jsonEncode errorMessage}}\n}",
            "bodyTemplateType":"json",
            "pageIdTemplate":"",
            "layoutIdTemplate":""
         },
         "id":"Hk_BF3uAZ",
         "outputIds":[
            [
               "rkSK-TdRZ"
            ]
         ]
      },
      {
         "type":"DebugNode",
         "meta":{
            "category":"output",
            "name":"debug",
            "label":"Debug",
            "x":740,
            "y":1620,
            "description":"Log the requests hitting these endpoints."
         },
         "config":{
            "message":"",
            "property":""
         },
         "id":"rkSK-TdRZ",
         "outputIds":[

         ]
      },
      {
         "type":"GetExperienceUserNode",
         "meta":{
            "category":"experience",
            "name":"get-experience-user",
            "label":"Get User",
            "x":620,
            "y":620,
            "description":"Get the user by the ID found in the token."
         },
         "config":{
            "findMethod":"emailOrId",
            "resultPath":"userFromToken",
            "emailOrIdTemplate":"{{decodedToken.id}}"
         },
         "id":"S1S2GpuCW",
         "outputIds":[
            [
               "B1g7LU50-"
            ]
         ]
      },
      {
         "type":"ConditionalNode",
         "meta":{
            "category":"logic",
            "name":"conditional",
            "label":"Token / User Match?",
            "x":700,
            "y":820,
            "description":"Check to make sure the email in the token matches the email on the user. If not, something is fishy and we should bail."
         },
         "config":{
            "expression":"{{userFromToken.email}} === {{decodedToken.email}}"
         },
         "id":"Syv1P6u0b",
         "outputIds":[
            [
               "rkFJB2O0Z"
            ],
            [
               "rJaYLU9AZ"
            ]
         ]
      },
      {
         "type":"ConditionalNode",
         "meta":{
            "category":"logic",
            "name":"conditional",
            "label":"POST request?",
            "x":860,
            "y":1020,
            "description":"Was this a form submission?"
         },
         "config":{
            "expression":"{{ data.method }} == 'post'"
         },
         "id":"BkZtv6dC-",
         "outputIds":[
            [
               "HykjP6d0Z"
            ],
            [
               "BJn1opdR-"
            ]
         ]
      },
      {
         "type":"EndpointReplyNode",
         "meta":{
            "category":"output",
            "name":"endpoint-reply",
            "label":"Render Reset Page",
            "x":540,
            "y":1520,
            "description":"Render the reset page."
         },
         "config":{
            "headerInfo":[

            ],
            "cookieInfo":[

            ],
            "replyType":"page",
            "replyIdPath":"",
            "responseCodeTemplate":"200",
            "bodyTemplateType":"none",
            "pageIdTemplate":"",
            "layoutIdTemplate":""
         },
         "id":"HykjP6d0Z",
         "outputIds":[
            [
               "rkSK-TdRZ"
            ]
         ]
      },
      {
         "type":"ValidatePayloadNode",
         "meta":{
            "category":"logic",
            "name":"validate-payload",
            "label":"Validate Payload",
            "x":940,
            "y":1120,
            "description":"Validate the data submitted in the post request."
         },
         "config":{
            "schema":"{\n\t\"type\": \"object\",\n  \"properties\": {\n    \"email\": {\n    \t\"type\": \"string\",\n      \"format\": \"email\"\n    },\n    \"password\": {\n    \t\"type\": \"string\",\n      \"minLength\": 8,\n      \"maxLength\": 255\n    }\n  },\n  \"required\": [\"email\", \"password\"],\n  \"additionalProperties\": false\n}",
            "errorsPath":"",
            "toValidatePath":"data.body"
         },
         "id":"BJn1opdR-",
         "outputIds":[
            [
               "SJdEsa_RW"
            ],
            [
               "SJZ5sTuR-"
            ]
         ]
      },
      {
         "type":"MutateNode",
         "meta":{
            "category":"logic",
            "name":"mutate",
            "label":"Set Error Message",
            "x":640,
            "y":1420,
            "description":"User submitted data that fails validation."
         },
         "config":{
            "rules":[
               {
                  "type":"set",
                  "destination":"errorMessage",
                  "valueTemplate":"Email or password format is invalid."
               }
            ]
         },
         "id":"SJdEsa_RW",
         "outputIds":[
            [
               "Hk_BF3uAZ"
            ]
         ]
      },
      {
         "type":"ConditionalNode",
         "meta":{
            "category":"logic",
            "name":"conditional",
            "label":"Token / Submission Match?",
            "x":1020,
            "y":1220,
            "description":"Check to make sure the email in the post body matches the email on the token. If not, throw an error."
         },
         "config":{
            "expression":"{{data.body.email}} === {{decodedToken.email}}"
         },
         "id":"SJZ5sTuR-",
         "outputIds":[
            [
               "H1v2spORW"
            ],
            [
               "r1cn7C_CW"
            ]
         ]
      },
      {
         "type":"MutateNode",
         "meta":{
            "category":"logic",
            "name":"mutate",
            "label":"Set Error Message",
            "x":840,
            "y":1420,
            "description":"The email address in the token does not match the email address we have on file for the user."
         },
         "config":{
            "rules":[
               {
                  "type":"set",
                  "destination":"errorMessage",
                  "valueTemplate":"Email does not match token's value."
               }
            ]
         },
         "id":"H1v2spORW",
         "outputIds":[
            [
               "Hk_BF3uAZ"
            ]
         ]
      },
      {
         "type":"UpdateExperienceUserNode",
         "meta":{
            "category":"experience",
            "name":"update-experience-user",
            "label":"Update User",
            "x":1040,
            "y":1320,
            "description":"Set the new password and invalidate any existing tokens."
         },
         "config":{
            "dataMethod":"individualFields",
            "resultPath":"updatedUser",
            "invalidateExistingTokens":false,
            "emailOrIdTemplate":"{{decodedToken.id}}",
            "emailTemplate":"",
            "firstNameTemplate":"",
            "lastNameTemplate":"",
            "passwordTemplate":"{{data.body.password}}",
            "userTags":[

            ]
         },
         "id":"r1cn7C_CW",
         "outputIds":[
            [
               "rJfd4CO0-"
            ]
         ]
      },
      {
         "type":"ExperienceUserTokenNode",
         "meta":{
            "category":"experience",
            "name":"experience-user-token",
            "label":"Generate Token",
            "x":1040,
            "y":1420,
            "description":"Password was successfully changed. Generate a new auth token for the user and invalidate any existing tokens."
         },
         "config":{
            "emailOrIdTemplate":"{{updatedUser.id}}",
            "ttlTemplate":"",
            "resultPath":"newToken",
            "invalidateExistingTokens":true
         },
         "id":"rJfd4CO0-",
         "outputIds":[
            [
               "S1UpE0dCZ"
            ]
         ]
      },
      {
         "type":"EndpointReplyNode",
         "meta":{
            "category":"output",
            "name":"endpoint-reply",
            "label":"Go to /",
            "x":940,
            "y":1520,
            "description":"Redirect the user to the home page and set the new token as a cookie."
         },
         "config":{
            "headerInfo":[

            ],
            "cookieInfo":[
               {
                  "nameTemplate":"authorization",
                  "valueTemplate":"{{newToken}}",
                  "maxAgeTemplate":""
               }
            ],
            "replyType":"redirect",
            "replyIdPath":"",
            "responseCodeTemplate":"302",
            "bodyTemplate":"/",
            "bodyTemplateType":"string"
         },
         "id":"S1UpE0dCZ",
         "outputIds":[
            [
               "rkSK-TdRZ"
            ]
         ]
      },
      {
         "type":"ConditionalNode",
         "meta":{
            "category":"logic",
            "name":"conditional",
            "label":"User exists?",
            "x":620,
            "y":720,
            "description":"Check to make sure we found a user by that ID."
         },
         "config":{
            "expression":"{{userFromToken.id}}"
         },
         "id":"B1g7LU50-",
         "outputIds":[
            [
               "rkFJB2O0Z"
            ],
            [
               "Syv1P6u0b"
            ]
         ]
      },
      {
         "type":"ConditionalNode",
         "meta":{
            "category":"logic",
            "name":"conditional",
            "label":"Password not reset yet?",
            "x":780,
            "y":920,
            "description":"Check the token's issue time against the last time the user's password was reset. If reset happened after the issue date, don't honor the token."
         },
         "config":{
            "expression":"{{formatDate userFromToken.passwordLastUpdated 'X'}} < {{decodedToken.iat}}"
         },
         "id":"rJaYLU9AZ",
         "outputIds":[
            [
               "rkFJB2O0Z"
            ],
            [
               "BkZtv6dC-"
            ]
         ]
      }
   ],
   "name":"Endpoint /reset-password",
   "enabled":true,
   "description":"",
   "applicationId":"59fa4f7976b5470007a377b4",
   "_type":"flow",
   "_exportDate":"2017-11-07T00:54:33.330Z"
}
